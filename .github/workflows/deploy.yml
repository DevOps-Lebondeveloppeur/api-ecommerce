name: CI/CD api-ecommerce

env:
  BUILD_NUMBER: ${{ github.run_number }}
  IMAGE_NAME: api-ecommerce

on:
  push:
    branches:
      - main

jobs:

  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

  build-and-push-job:
    runs-on: ubuntu-latest
    needs: test-job
    steps:

      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.43.0/trivy_0.43.0_Linux-x86_64.tar.gz
          tar zxvf trivy_0.43.0_Linux-x86_64.tar.gz
          sudo mv trivy /usr/local/bin/
          trivy --version

      - name: Run Trivy security scan
        run: |
          trivy image --no-progress --exit-code 1 --severity HIGH,CRITICAL ${{ env.IMAGE_NAME }}
        continue-on-error: false  # Fail the pipeline if vulnerabilities are found

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag Docker image with specific version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}

      - name: Push Docker image with specific version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}

      - name: Tag Docker image with latest version
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker image with latest version
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy-job:
    runs-on: ubuntu-latest
    needs: build-and-push-job
    steps:

      - name: Connect to the VPS using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /home/ubuntu/devops-ecommerce/api
            sudo git pull
            sudo docker compose pull
            sudo docker compose up -d --force-recreate --remove-orphans
